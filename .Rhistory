dev.off()
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = Session.amp.windows,
name.of.col.containing.time.series = "PC1",
x_start = 0,
x_end = 24,
x_increment = 0.01,
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = represented_tasks,
plot.title = plot.title.logPSD,
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50,
my.colors <- c("blue", "red", "black", "green", "gold", "darkorchid1", "brown", "turquoise2"))
pdf.title <- paste(plot.title.time.series, ".pdf")
pdf(pdf.title)
# 2. Create the plot
print(result[[2]])
# 3. Close the file
dev.off()
}
}
}
#Look through each session
#Look through each amplitde
###Does amplitude have tasks with non-zeros
####If so, then make PSDs for the tasks with non-zeros
sessions_labels <- c("A", "B", "C", "D", "E", "F", "G", "H")
#For each session
for(i in 1:length(sessions_labels)){
print(paste("Session", i))
Session.windows <- GetSubsetOfWindows(windows, "SESSION_ID", sessions_labels[i])
contingency.table.Session <- CountWindows(Session.windows, "RTR_AMP", "TASK_ID", c(0, 1, 2, 3), c("speech", "tremor_at_rest", "arm_contra_combined", "leg_agility_contra"))
#For each amplitude
for(x in 1:dim(contingency.table.Session)[1]){
represented_tasks <- NULL
combinations <- list()
combinations.index <- 1
#For each task, see which ones have a non-zero value
for(y in 1:dim(contingency.table.Session)[2]){
if(contingency.table.Session[x,y] != 0){
task_name <- colnames(contingency.table.Session)[y]
represented_tasks <- c(represented_tasks, task_name)
combinations[[combinations.index]] <- list( c(sessions_labels[i]), c(task_name))
combinations.index <-  combinations.index + 1
}
}
#In each amplitude, make curves of the tasks that have events
if(!is.null(represented_tasks)){
Session.amp.windows <- GetSubsetOfWindows(Session.windows, "RTR_AMP", x-1)
plot.title.time.series <- paste("Session ", sessions_labels[i], " Amplitude ", x-1, " Any task with events. PC1. Time series")
plot.title.PSD <- paste("Session ", sessions_labels[i], " Amplitude ", x-1, " Any task with events. PC1. PSD")
plot.title.logPSD <- paste("Session ", sessions_labels[i], " Amplitude ", x-1, " Any task with events. PC1. LogPSD")
result <- AutomatedCompositePlotting(list.of.windows = Session.amp.windows,
name.of.col.containing.time.series = "PC1",
x_start = 0,
x_end = 150,
x_increment = 1,
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = represented_tasks,
plot.title = plot.title.time.series,
plot.xlab = "Time in 0.02 second increments",
plot.ylab = "Acceleration",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "TimeSeries",
sampling_frequency = NULL,
my.colors <- c("blue", "red", "black", "green", "gold", "darkorchid1", "brown", "turquoise2"))
pdf.title <- paste(plot.title.time.series, ".pdf")
pdf(pdf.title)
# 2. Create the plot
print(result[[2]])
# 3. Close the file
dev.off()
#PSD
result <- AutomatedCompositePlotting(list.of.windows = Session.amp.windows,
name.of.col.containing.time.series = "PC1",
x_start = 0,
x_end = 24,
x_increment = 0.01,
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = represented_tasks,
plot.title = plot.title.PSD,
plot.xlab = "Hz",
plot.ylab = "(Acceleration^2)/Hz",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50,
my.colors <- c("blue", "red", "black", "green", "gold", "darkorchid1", "brown", "turquoise2"))
pdf.title <- paste(plot.title.PSD, ".pdf")
pdf(pdf.title)
# 2. Create the plot
print(result[[2]])
# 3. Close the file
dev.off()
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = Session.amp.windows,
name.of.col.containing.time.series = "PC1",
x_start = 0,
x_end = 24,
x_increment = 0.01,
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = represented_tasks,
plot.title = plot.title.logPSD,
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50,
my.colors <- c("blue", "red", "black", "green", "gold", "darkorchid1", "brown", "turquoise2"))
pdf.title <- paste(plot.title.logPSD, ".pdf")
pdf(pdf.title)
# 2. Create the plot
print(result[[2]])
# 3. Close the file
dev.off()
}
}
}
#Remove this if the above works.
#------------------------------------------------------------------------------
# Session A amplitude 2. All tasks
#------------------------------------------------------------------------------
#No tremor at rest
#Get only amplitude 2 windows
AmpTwo.windows <- GetSubsetOfWindows(windows, "RTR_AMP", "2")
combinations <- list(
list( c("A"), c("speech")),
list( c("A"), c("arm_contra_combined")),
list( c("A"), c("leg_agility_contra"))
)
#Time series
result <- AutomatedCompositePlotting(list.of.windows = AmpTwo.windows,
name.of.col.containing.time.series = "PC1",
x_start = 0,
x_end = 150,
x_increment = 1,
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = c("speech", "arm_contra_combined", "leg_agility_contra"),
plot.title = "Session A. Amplitude 2. All tasks (No tremor_at_rest). PC1. Time Series",
plot.xlab = "Time in 0.02 second increments",
plot.ylab = "Acceleration",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "TimeSeries",
sampling_frequency = NULL,
my.colors <- c("blue", "red", "black", "green", "gold", "darkorchid1", "brown", "turquoise2"))
dev.new()
result[[2]]
#PSD
result <- AutomatedCompositePlotting(list.of.windows = AmpTwo.windows,
name.of.col.containing.time.series = "PC1",
x_start = 0,
x_end = 24,
x_increment = 0.01,
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = c("speech", "arm_contra_combined", "leg_agility_contra"),
plot.title = "Session A. Amplitude 2. All tasks (No tremor_at_rest). PC1. PSD",
plot.xlab = "Hz",
plot.ylab = "(Acceleration^2)/Hz",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50,
my.colors <- c("blue", "red", "black", "green", "gold", "darkorchid1", "brown", "turquoise2"))
dev.new()
result[[2]]
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = AmpTwo.windows,
name.of.col.containing.time.series = "PC1",
x_start = 0,
x_end = 24,
x_increment = 0.01,
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = c("speech", "arm_contra_combined", "leg_agility_contra"),
plot.title = "Session A. Amplitude 2. All tasks (No tremor_at_rest). PC1. LogPSD",
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50,
my.colors <- c("blue", "red", "black", "green", "gold", "darkorchid1", "brown", "turquoise2"))
dev.new()
result[[2]]
#Determine if difference in dominant frequency is significant
results <- SingleBinPSDIntegrationOrDominantFreqComparison(list.of.windows = AmpTwo.windows,
name.of.col.containing.time.series = "PC1",
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = c("speech", "arm_contra_combined", "leg_agility_contra"),
sampling_frequency = 50,
single.bin.boundary = NULL,
x_start = 0,
x_end = 24,
x_increment = 0.01,
integration.or.dominant.freq = "dominant.freq")
#------------------------------------------------------------------------------
# Session A amplitude 3. All tasks
#------------------------------------------------------------------------------
#Speech and arm_contra_combined
#------------------------------------------------------------------------------
# Session B amplitude 1. All tasks
#------------------------------------------------------------------------------
#tremor_at_rest and arm_contra_combined
#------------------------------------------------------------------------------
# Session B amplitude 2. All tasks
#------------------------------------------------------------------------------
#speech and arm_contra_combined and leg_agility_contra
#------------------------------------------------------------------------------
# Session C amplitude 1. All tasks
#-------------------------------------------------------------
#Determine if difference in dominant frequency is significant
results <- SingleBinPSDIntegrationOrDominantFreqComparison(list.of.windows = AmpTwo.windows,
name.of.col.containing.time.series = "PC1",
level1.column.name = "SESSION_ID",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = c("speech", "arm_contra_combined", "leg_agility_contra"),
sampling_frequency = 50,
single.bin.boundary = NULL,
x_start = 0,
x_end = 24,
x_increment = 0.01,
integration.or.dominant.freq = "dominant.freq")
results
results[[3]]
results[[3]]$p.value
results[[3]]$data.name
results[[1]]
results[[1]][1]
results[[1]][2]
results[[1]][1,]
results[[1]][[1]]
results[[1]][[2]]
results[[1]]$vals.to.compare.combined
#' x_end = 10,
#' x_increment = 0.01,
#' integration.or.dominant.freq = "dominant_freq")
#'
#' #Kruskal-Wallis test results
#' integration.compare.res4[[2]]
#' #Values used in comparison of the two groups
#' integration.compare.res4[[1]]
#'
#'
SingleBinPSDIntegrationOrDominantFreqComparison <- function(list.of.windows,
name.of.col.containing.time.series,
level1.column.name,
level2.column.name,
level.combinations,
level.combinations.labels,
sampling_frequency,
single.bin.boundary = NULL,
x_start = NULL,
x_end = NULL,
x_increment = NULL,
integration.or.dominant.freq){
integrals.or.dominant.freq.for.each.combo <- list()
#For each combo specified, get the integral value for the specified bin in all
#windows that belong to the combo
for(i in 1:length(level.combinations)){
level1.categories.to.use <-  level.combinations[[i]][[1]]
level2.categories.to.use <- level.combinations[[i]][[2]]
subset.windows <- GetSubsetOfWindowsTwoLevels(list.of.windows, level1.column.name, level2.column.name,
level1.categories.to.use, level2.categories.to.use)
if(integration.or.dominant.freq == "integration"){
integration.res.for.subset.windows <- SingleBinPSDIntegrationForMultipleWindows(subset.windows,
name.of.col.containing.time.series,
sampling_frequency, single.bin.boundary)
integrals.or.dominant.freq.for.each.combo[[i]] <- integration.res.for.subset.windows
} else{
dominant.freq.res.for.subset.windows <- PSDDominantFrequencyForMultipleWindows(subset.windows,
name.of.col.containing.time.series,
sampling_frequency,
x_start, x_end, x_increment)
integrals.or.dominant.freq.for.each.combo[[i]] <- dominant.freq.res.for.subset.windows
}
}
#At this point, we should have vectors of integrals or dominant frequency with each vector
#corresponding to a different combo. Now we want to see if the integrals
#in each combo significantly differ from the other combos. ANOVA can be used.
#Combine the vectors of integrals or dominant frequency together
vals.to.compare.combined <- NULL
combo.labels.combined <- NULL
for(i in 1:length(integrals.or.dominant.freq.for.each.combo)){
#Combine integral/dominant_freq into one large vector
integral.or.dominant.freq.vec.for.one.combo <- integrals.or.dominant.freq.for.each.combo[[i]]
vals.to.compare.combined <- c(vals.to.compare.combined, integral.or.dominant.freq.vec.for.one.combo)
#Make sure to have another column that labels which integrals belong in
#which combo
combo.labels.combined.temp <- rep(level.combinations.labels[[i]], length(integral.or.dominant.freq.vec.for.one.combo))
combo.labels.combined <- c(combo.labels.combined, combo.labels.combined.temp)
}
vals.to.compare.with.combo.labels <- data.frame(vals.to.compare.combined, combo.labels.combined)
#http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r
kruskal.test.res <- stats::kruskal.test(vals.to.compare.combined ~ combo.labels.combined, data = vals.to.compare.with.combo.labels)
pairwise.wilcox.rest.res <- stats::pairwise.wilcox.test(vals.to.compare.with.combo.labels$vals.to.compare.combined,
vals.to.compare.with.combo.labels$combo.labels.combined,
p.adjust.method = "BH")
output <- list(vals.to.compare.with.combo.labels, kruskal.test.res, pairwise.wilcox.rest.res)
return(output)
}
#Create a vector of time that represent times where data are sampled.
Fs = 100; #sampling frequency in Hz
T = 1/Fs; #sampling period
L = 1000; #length of time vector
t = (0:L-1)*T; #time vector
#First signal
#1. 1 Hz with amplitude of 2
S1 <- 2*sin(2*pi*1*t)
level1.vals <- rep("a", length(S1))
level2.vals <- rep("1", length(S1))
S1.data.frame <- as.data.frame(cbind(t, S1, level1.vals, level2.vals))
colnames(S1.data.frame) <- c("Time", "Signal", "level1.ID", "level2.ID")
S1.data.frame[,"Signal"] <- as.numeric(S1.data.frame[,"Signal"])
#Second signal
#1. 1 Hz with amplitude of -4
#2. 2 Hz with amplitude of -2
S2 <- (-4)*sin(2*pi*1*t) - 2*sin(2*pi*2*t);
level1.vals <- rep("a", length(S2))
level2.vals <- rep("2", length(S2))
S2.data.frame <- as.data.frame(cbind(t, S2, level1.vals, level2.vals))
colnames(S2.data.frame) <- c("Time", "Signal", "level1.ID", "level2.ID")
S2.data.frame[,"Signal"] <- as.numeric(S2.data.frame[,"Signal"])
#Third signal
#1. 1 Hz with amplitude of 2
#2. 2 Hz with amplitude of 2
S3 <- 2*sin(2*pi*1*t) + 2*sin(2*pi*2*t);
level1.vals <- rep("a", length(S3))
level2.vals <- rep("3", length(S3))
S3.data.frame <- as.data.frame(cbind(t, S3, level1.vals, level2.vals))
colnames(S3.data.frame) <- c("Time", "Signal", "level1.ID", "level2.ID")
S3.data.frame[,"Signal"] <- as.numeric(S3.data.frame[,"Signal"])
#Fourth signal
#1. 1 Hz with amplitude of -2
S4 <- -2*sin(2*pi*1*t)
level1.vals <- rep("b", length(S4))
level2.vals <- rep("3", length(S4))
S4.data.frame <- as.data.frame(cbind(t, S4, level1.vals, level2.vals))
colnames(S4.data.frame) <- c("Time", "Signal", "level1.ID", "level2.ID")
S4.data.frame[,"Signal"] <- as.numeric(S4.data.frame[,"Signal"])
#Fifth signal
#1. 5 Hz with amplitude of -2
S5 <- -2*sin(2*pi*5*t)
level1.vals <- rep("c", length(S5))
level2.vals <- rep("1", length(S5))
S5.data.frame <- as.data.frame(cbind(t, S5, level1.vals, level2.vals))
colnames(S5.data.frame) <- c("Time", "Signal", "level1.ID", "level2.ID")
S5.data.frame[,"Signal"] <- as.numeric(S5.data.frame[,"Signal"])
#Extra representation of S2 dataframe to show an example that has enough samples
#to have significance for Kruskal-Wallis test
windows <- list(S1.data.frame, S2.data.frame, S2.data.frame, S2.data.frame, S2.data.frame,
S2.data.frame, S2.data.frame, S2.data.frame, S2.data.frame, S2.data.frame, S3.data.frame,
S4.data.frame,
S5.data.frame, S5.data.frame, S5.data.frame, S5.data.frame, S5.data.frame)
#Gets the composite of the first, second, and third signal. Should result in a flat signal.
FirstComboToUse <- list( c("a"), c(1, 2, 3) )
#Gets the composite of the third and fourth signal
SecondComboToUse <- list( c("a", "b"), c(3) )
#Gets the composite of fifth signal
ThirdComboToUse <- list( c("c"), c(1) )
#PSD-------------------------------------------------------------------------
PSD.results <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "Signal",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "level1.ID",
level2.column.name = "level2.ID",
level.combinations = list(FirstComboToUse,
SecondComboToUse,
ThirdComboToUse),
level.combinations.labels = c("Signal 1 + 2 + 3",
"Signal 3 + 4",
"Signal 5"),
plot.title = "Example",
plot.xlab = "Hz",
plot.ylab = "(Original units)^2/Hz",
combination.index.for.envelope = 2,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 100)
ggplot.obj.PSD <- PSD.results[[2]]
#Integration-------------------------------------------------------------------------
#Compare integration for the 1.5-2.5 Hz bin. P-value should not indicate
#significant difference
integration.compare.res <- SingleBinPSDIntegrationOrDominantFreqComparison(
list.of.windows = windows,
name.of.col.containing.time.series = "Signal",
level1.column.name = "level1.ID",
level2.column.name = "level2.ID",
level.combinations = list(FirstComboToUse, SecondComboToUse),
level.combinations.labels = c("Signal 1 + 2 + 3", "Signal 3 + 4"),
sampling_frequency = 100,
single.bin.boundary = c(1.5, 2.5),
integration.or.dominant.freq = "integration")
#Kruskal-Wallis test results
integration.compare.res[[2]]
#Compare integration for the 0.5-1.5 Hz bin. P-value should indicate
#significant difference
integration.compare.res2 <- SingleBinPSDIntegrationOrDominantFreqComparison(
list.of.windows = windows,
name.of.col.containing.time.series = "Signal",
level1.column.name = "level1.ID",
level2.column.name = "level2.ID",
level.combinations = list(FirstComboToUse, SecondComboToUse),
level.combinations.labels = c("Signal 1 + 2 + 3", "Signal 3 + 4"),
sampling_frequency = 100,
single.bin.boundary = c(0.5,1.5),
integration.or.dominant.freq = "integration")
#Kruskal-Wallis test results
integration.compare.res2[[2]]
#Dominant Frequency---------------------------------------------------------------------
#Compare dominant frequency P-value should not indicate
#significant difference
integration.compare.res3 <- SingleBinPSDIntegrationOrDominantFreqComparison(
list.of.windows = windows,
name.of.col.containing.time.series = "Signal",
level1.column.name = "level1.ID",
level2.column.name = "level2.ID",
level.combinations = list(FirstComboToUse, SecondComboToUse),
level.combinations.labels = c("Signal 1 + 2 + 3", "Signal 3 + 4"),
sampling_frequency = 100,
x_start = 0,
x_end = 10,
x_increment = 0.01,
integration.or.dominant.freq = "dominant_freq")
#Kruskal-Wallis test results
integration.compare.res3[[2]]
#Compare dominant frequency P-value should indicate
#significant difference
integration.compare.res4 <- SingleBinPSDIntegrationOrDominantFreqComparison(
list.of.windows = windows,
name.of.col.containing.time.series = "Signal",
level1.column.name = "level1.ID",
level2.column.name = "level2.ID",
level.combinations = list(SecondComboToUse, ThirdComboToUse),
level.combinations.labels = c("Signal 3 + 4", "Signal 5"),
sampling_frequency = 100,
x_start = 0,
x_end = 10,
x_increment = 0.01,
integration.or.dominant.freq = "dominant_freq")
#Kruskal-Wallis test results
integration.compare.res4[[2]]
#Values used in comparison of the two groups
integration.compare.res4[[1]]
integration.compare.res3[[1]]
integration.compare.res3[[2]]
integration.compare.res3[[3]]
integration.compare.res4[[3]]
integration.compare.res4[[2]]
stats::pairwise.wilcox.test(integration.compare.res4[[1]]$vals.to.compare.combined,
integration.compare.res4[[1]]$combo.labels.combined)
stats::pairwise.wilcox.test(integration.compare.res4[[1]]$vals.to.compare.combined,
integration.compare.res4[[1]]$combo.labels.combined, p.adjust.method = none)
stats::pairwise.wilcox.test(integration.compare.res4[[1]]$vals.to.compare.combined,
integration.compare.res4[[1]]$combo.labels.combined, p.adjust.method = "none")
wilcox <- stats::pairwise.wilcox.test(integration.compare.res4[[1]]$vals.to.compare.combined,
integration.compare.res4[[1]]$combo.labels.combined, p.adjust.method = "none")
kruskal <- stats::kruskal.test(vals.to.compare.combined ~ combo.labels.combined, data = integration.compare.res4[[1]])
kruskal
wilcox
integration.compare.res4[[1]]
wilcox$p.value
setwd("S:/Git_Repos/Package_Development/machinelearnr_various_ML_package/machinelearnr")
#Check for everything
#Checks so much. Absolutely awesome.
#Before running this, you should restart the r session because the functions might already be loaded and this will cause conflicts.
devtools::check()
#Check for everything
#Checks so much. Absolutely awesome.
#Before running this, you should restart the r session because the functions might already be loaded and this will cause conflicts.
devtools::check()
usethis::use_package("pheatmap", type = "Imports", min_version = TRUE)
#Check for everything
#Checks so much. Absolutely awesome.
#Before running this, you should restart the r session because the functions might already be loaded and this will cause conflicts.
devtools::check()
#Add a readme file on github.
#Workflow:
#1. Edit your README.Rmd file
#2. Build your README.md file by running devtools::build_readme() in the R console. Github displays the md file. Need to run this from S: drive.
#3. Commit both your README.Rmd and README.md
usethis::use_readme_rmd()
getwd()
#Add a readme file on github.
#Workflow:
#1. Edit your README.Rmd file
#2. Build your README.md file by running devtools::build_readme() in the R console. Github displays the md file. Need to run this from S: drive.
#3. Commit both your README.Rmd and README.md
usethis::use_readme_rmd()
setwd("S:/Git_Repos/Package_Development/machinelearnr_various_ML_package/machinelearnr")
#Add a readme file on github.
#Workflow:
#1. Edit your README.Rmd file
#2. Build your README.md file by running devtools::build_readme() in the R console. Github displays the md file. Need to run this from S: drive.
#3. Commit both your README.Rmd and README.md
usethis::use_readme_rmd()
