TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = legend.labels,
plot.title = "Different amplitudes. All tasks. SummedXYZ. LogPSD",
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#------------------------------------------------------------------------------
# This time, we are not showing different tremor scores, but only different tasks.
# SummedXYZ
#------------------------------------------------------------------------------
#task.names <- c("speech", "tremor_at_rest", "arm_contra_combined", "leg_agility_contra")
combinations <- list(
list( c(1,2,3), c("speech")),
list( c(1,2), c("tremor_at_rest")),
list( c(1,2,3), c("arm_contra_combined")),
list( c(1,2), c("leg_agility_contra"))
)
#Time series #NOTE: The amplitudes do not appear to differ that much.
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 150,
x_increment = 1,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Different tasks. All tremors. SummedXYZ. Time Series",
plot.xlab = "Time in 0.02 second increments",
plot.ylab = "Acceleration",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "TimeSeries",
sampling_frequency = NULL)
dev.new()
result[[2]]
#PSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Different tasks. All tremors. SummedXYZ. PSD",
plot.xlab = "Hz",
plot.ylab = "(Acceleration^2)/Hz",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Different tasks. All tremors. SummedXYZ. LogPSD",
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50)
dev.new()
result[[2]]
graphics.off()
library("psdr")
source("//nindsdirfs2.ninds.nih.gov/shares/BIS/PI/Hank_Cheng/Git_Repos/Bryan_Smith_and_Govind_Bhagavatheeshwaran/Predicting_HIV/Code/Functions_for_machine_learning_V1.R")
#------------------------------------------------------------------------------
# Input data
#------------------------------------------------------------------------------
Use.input.file.name <- "//nindsdirfs2.ninds.nih.gov/shares/BIS/PI/Hank_Cheng/Git_Repos/Jonathan_Pomeraniec/Power_spectral_density/Data/PSD_WindowsLabeled_TasksRelabeled_3.16.21.xlsx"
working.data = my_data <- readxl::read_excel(Use.input.file.name, sheet = 1)
working.data <- as.data.frame(working.data)
#------------------------------------------------------------------------------
# PCA
#------------------------------------------------------------------------------
#Since scale is set false, the units of PC1 will be in the original units of acceleration
output <- AddPCsToEnd(working.data, c("USER_ACCEL_X_INDEX", "USER_ACCEL_Y_INDEX",
"USER_ACCEL_Z_INDEX"), FALSE, 0.01)
working.data <- output[[1]]
#------------------------------------------------------------------------------
# Combined amplitude
#------------------------------------------------------------------------------
working.data$SummedXYZ <- working.data$USER_ACCEL_X_INDEX + working.data$USER_ACCEL_Y_INDEX + working.data$USER_ACCEL_Z_INDEX
#------------------------------------------------------------------------------
# Get windows that share the same amplitude and task
#------------------------------------------------------------------------------
windows <- GetHomogeneousWindows(working.data, "window_index",
c("TASK_ID", "RTR_AMP"))
#------------------------------------------------------------------------------
# Look at windows
#------------------------------------------------------------------------------
#How many are in each category
contingency.table <- CountWindows(windows, "RTR_AMP", "TASK_ID", c(0, 1, 2, 3), c("speech", "tremor_at_rest", "arm_contra_combined", "leg_agility_contra"))
#What is the length of the windows
length.of.windows <- NULL
for(x in 1:length(windows)){
length.of.windows <- c(length.of.windows, dim(windows[[x]])[1])
}
#We expect most windows should be 3 seconds long. Each obs is 0.02 seconds, so
#we expect the length of windows to be 150.
dev.new()
hist(length.of.windows, breaks = 150)
#Only keep windows that are 150 and 151
#Truncate the windows with 151 down to 150
windows.to.keep <- list()
counter <- 1
for(x in 1:length(windows)){
if(dim(windows[[x]])[1] == 150){
#If it has 150 observations, Keep window
windows.to.keep[[counter]] <- windows[[x]]
counter <- counter + 1
} else if (dim(windows[[x]])[1] == 151){
#If it has 151 observations, remove the last observation and then keep the window
window.temp <- windows[[x]]
window.temp <- window.temp[-c(151), ]
windows.to.keep[[counter]] <- window.temp
counter <- counter + 1
}
}
#Check length. Should all be 150.
length.of.windows <- NULL
for(x in 1:length(windows.to.keep)){
length.of.windows <- c(length.of.windows, dim(windows.to.keep[[x]])[1])
}
#We expect most windows should be 3 seconds long. Each obs is 0.02 seconds, so
#we expect the length of windows to be 150.
dev.new()
hist(length.of.windows, breaks = 150)
#------------------------------------------------------------------------------
# Defining reusable variables
#------------------------------------------------------------------------------
windows <- windows.to.keep
task.names <- c("speech", "tremor_at_rest", "arm_contra_combined", "leg_agility_contra")
#------------------------------------------------------------------------------
# Amplitude 1. Compare 4 tasks. SummedXYZ
#------------------------------------------------------------------------------
combinations <- list(
list( c(1), c("speech")),
list( c(1), c("tremor_at_rest")),
list( c(1), c("arm_contra_combined")),
list( c(1), c("leg_agility_contra"))
)
#Time series
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 150,
x_increment = 1,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Amplitude 1. Compare 4 tasks. SummedXYZ. Time Series",
plot.xlab = "Time in 0.02 second increments",
plot.ylab = "Acceleration",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "TimeSeries",
sampling_frequency = NULL)
dev.new()
result[[2]]
#PSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Amplitude 1. Compare 4 tasks. SummedXYZ. PSD",
plot.xlab = "Hz",
plot.ylab = "(Acceleration^2)/Hz",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Amplitude 1. Compare 4 tasks. SummedXYZ. LogPSD",
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#------------------------------------------------------------------------------
# Amplitude 2. Compare 4 tasks. SummedXYZ
#------------------------------------------------------------------------------
combinations <- list(
list( c(2), c("speech")),
list( c(2), c("tremor_at_rest")),
list( c(2), c("arm_contra_combined")),
list( c(2), c("leg_agility_contra"))
)
#Time series
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 150,
x_increment = 1,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Amplitude 2. Compare 4 tasks. SummedXYZ. Time Series",
plot.xlab = "Time in 0.02 second increments",
plot.ylab = "Acceleration",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "TimeSeries",
sampling_frequency = NULL)
dev.new()
result[[2]]
#PSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Amplitude 2. Compare 4 tasks. SummedXYZ. PSD",
plot.xlab = "Hz",
plot.ylab = "(Acceleration^2)/Hz",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Amplitude 2. Compare 4 tasks. SummedXYZ. LogPSD",
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#------------------------------------------------------------------------------
# All tremor combined across all tremor scores and tasks (e.g. not splitting out into 1/2/3 or leg/arm/speech/rest)
# SummedXYZ
#------------------------------------------------------------------------------
combinations <- list(
list( c(1,2,3), c(task.names))
)
#Time series
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 150,
x_increment = 1,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = "Combined",
plot.title = "All scores. All tasks. SummedXYZ. Time Series",
plot.xlab = "Time in 0.02 second increments",
plot.ylab = "Acceleration",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "TimeSeries",
sampling_frequency = NULL)
dev.new()
result[[2]]
#PSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = "Combined",
plot.title = "All scores. All tasks. SummedXYZ. PSD",
plot.xlab = "Hz",
plot.ylab = "(Acceleration^2)/Hz",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = "Combined",
plot.title = "All scores. All tasks. SummedXYZ. LogPSD",
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#------------------------------------------------------------------------------
# Split up into tremor score 1/2/3. So this time, we are showing the different tremor scores, but still not splitting up into task.
# SummedXYZ
#------------------------------------------------------------------------------
combinations <- list(
list( c(1), c(task.names)),
list( c(2), c(task.names))
)
legend.labels <- c("Amplitude1_4Tasks", "Amplitude2_4Tasks")
#Time series #NOTE: The amplitudes do not appear to differ that much.
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 150,
x_increment = 1,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = legend.labels,
plot.title = "Different amplitudes. All tasks. SummedXYZ. Time Series",
plot.xlab = "Time in 0.02 second increments",
plot.ylab = "Acceleration",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "TimeSeries",
sampling_frequency = NULL)
dev.new()
result[[2]]
#PSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = legend.labels,
plot.title = "Different amplitudes. All tasks. SummedXYZ. PSD",
plot.xlab = "Hz",
plot.ylab = "(Acceleration^2)/Hz",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = legend.labels,
plot.title = "Different amplitudes. All tasks. SummedXYZ. LogPSD",
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#------------------------------------------------------------------------------
# This time, we are not showing different tremor scores, but only different tasks.
# SummedXYZ
#------------------------------------------------------------------------------
#task.names <- c("speech", "tremor_at_rest", "arm_contra_combined", "leg_agility_contra")
combinations <- list(
list( c(1,2,3), c("speech")),
list( c(1,2), c("tremor_at_rest")),
list( c(1,2,3), c("arm_contra_combined")),
list( c(1,2), c("leg_agility_contra"))
)
#Time series #NOTE: The amplitudes do not appear to differ that much.
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 150,
x_increment = 1,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Different tasks. All tremors. SummedXYZ. Time Series",
plot.xlab = "Time in 0.02 second increments",
plot.ylab = "Acceleration",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "TimeSeries",
sampling_frequency = NULL)
dev.new()
result[[2]]
#PSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Different tasks. All tremors. SummedXYZ. PSD",
plot.xlab = "Hz",
plot.ylab = "(Acceleration^2)/Hz",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "PSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#LogPSD
result <- AutomatedCompositePlotting(list.of.windows = windows,
name.of.col.containing.time.series = "SummedXYZ",
x_start = 0,
x_end = 10,
x_increment = 0.01,
level1.column.name = "RTR_AMP",
level2.column.name = "TASK_ID",
level.combinations = combinations,
level.combinations.labels = task.names,
plot.title = "Different tasks. All tremors. SummedXYZ. LogPSD",
plot.xlab = "Hz",
plot.ylab = "Log((Acceleration^2)/Hz)",
combination.index.for.envelope = NULL,
TimeSeries.PSD.LogPSD = "LogPSD",
sampling_frequency = 50)
dev.new()
result[[2]]
#Change into the package directory
setwd("S:/Git_Repos/Package_Development/machinelearnr_various_ML_package/machinelearnr")
#Add license so that I don't get a warning
usethis::use_mit_license()
#Check for everything
#Checks so much. Absolutely awesome.
#Before running this, you should restart the r session because the functions might already be loaded and this will cause conflicts.
devtools::check()
#Specify package dependency
#use_package(package, type = "Imports", min_version = NULL)
usethis::use_package("stats", type = "Imports", min_version = TRUE)
#Change into the package directory
setwd("S:/Git_Repos/Package_Development/machinelearnr_various_ML_package/machinelearnr")
#Load package
devtools::load_all()
?StabilityTestingAcrossVisits
rm(list = c("AddPCsToEnd", "RemoveColWithAllZeros", "StabilityTestingAcrossVisits"))
#Change into the package directory
setwd("S:/Git_Repos/Package_Development/machinelearnr_various_ML_package/machinelearnr")
#Test out the first function in analysis.R
devtools::document()
?StabilityTestingAcrossVisits
#Load package
devtools::load_all()
#To see the @example, you can normally do this example("functionName", package = "packageName")
#to see the examples for a function. But this only works for installed function.
#If the function is in development, then you need to use the run_examples() function
#To just run one function (actually starts at the one function, but runs multiple), you can do something like this: devtools::run_examples(start = "MakeCompositePSDForAllWindows")
devtools::run_examples()
identifier.col <- c("a", "a", "a", "b", "b", "b")
value.col <- c(1, 2, 3, 1, 1, 1)
input.data.frame <- as.data.frame(cbind(identifier.col, value.col))
View(input.data.frame)
View(input.data.frame)
View(input.data.frame)
#To see the @example, you can normally do this example("functionName", package = "packageName")
#to see the examples for a function. But this only works for installed function.
#If the function is in development, then you need to use the run_examples() function
#To just run one function (actually starts at the one function, but runs multiple), you can do something like this: devtools::run_examples(start = "MakeCompositePSDForAllWindows")
devtools::run_examples()
